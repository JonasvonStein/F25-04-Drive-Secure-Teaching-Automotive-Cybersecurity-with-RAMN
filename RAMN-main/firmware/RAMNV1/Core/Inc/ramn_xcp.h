/*
 * ramn_xcp.h
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 TOYOTA MOTOR CORPORATION.
 * ALL RIGHTS RESERVED.</center></h2>
 *
 * This software component is licensed by TOYOTA MOTOR CORPORATION under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

// This Modules handles XCP Diagnostics
// Currently a simplified (sometimes incorrect) implementation for testing with popular XCP scanning tools.

#ifndef INC_RAMN_XCP_H_
#define INC_RAMN_XCP_H_

#include "main.h"

#if defined(ENABLE_XCP)

#include "ramn_memory.h"
#include "ramn_canfd.h"

// Timeout for Message RX. Resets session if no message is received during that window.
#define XCP_RX_TIMEOUT 60000

// Structure that holds the status of current XCP Connection
typedef struct
{
	RAMN_Bool_t connected;        	// Whether a client is connected or not
	uint32_t 	lastRXTimestamp;  	// Timestamp of last RX message request
	RAMN_Bool_t	authenticated;	  	// Unlocked or not
	RAMN_Bool_t	seedRequested;	  	// Whether a seed was requested or not
	uint32_t	currentSeed;	  	// Current seed generated by GET_SEED command
	uint32_t	mtaPointer;    		// Pointer to the data to be uploaded
} RAMN_XCPHandler_t;

extern RAMN_XCPHandler_t RAMN_XCP_Handler;

// Initializes the module.
RAMN_Result_t 	RAMN_XCP_Init(uint32_t tick);

// Updates the module. Should be called periodically.
RAMN_Bool_t 	RAMN_XCP_Update(uint32_t tick);

// Sends outgoing messages.
RAMN_Bool_t		RAMN_XCP_Continue_TX(uint32_t tick, const uint8_t* data, uint16_t size);

// Processes a CAN Message addressed to XCP CAN ID. If a diagnostic messages has been reconstructed, it is put in strbuf. Returns true if a message has been reconstructed.
RAMN_Bool_t		RAMN_XCP_ProcessRxCANMessage(const FDCAN_RxHeaderTypeDef* pHeader, const uint8_t* data, uint32_t tick, StreamBufferHandle_t* strbuf);

// Processes a reconstructed diagnostics message.
void			RAMN_XCP_ProcessDiagPayload(uint32_t tick, const uint8_t* data, uint16_t size, uint8_t* answerData, uint16_t* answerSize);

#endif




#endif /* INC_RAMN_XCP_H_ */
