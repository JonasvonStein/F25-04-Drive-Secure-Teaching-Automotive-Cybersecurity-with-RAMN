//slightly modified from https://github.com/ToyotaInfoTech/RAMN/blob/5479b6c20f30c735f43dd8906f362049ee2ebe6c/firmware/RAMNV1/Core/Src/main.c#L1988
08000384 <RAMN_ReceiveCANFunc>:
{
 8000384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000388:	f240 56aa 	movw	r6, #1450	@ 0x5aa
 800038c:	4d3b      	ldr	r5, [pc, #236]	@ (800047c <RAMN_ReceiveCANFunc+0xf8>)
 800038e:	4f3c      	ldr	r7, [pc, #240]	@ (8000480 <RAMN_ReceiveCANFunc+0xfc>)
 8000390:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 800048c <RAMN_ReceiveCANFunc+0x108>
{
 8000394:	b09b      	sub	sp, #108	@ 0x6c
		if (xStreamBufferReceive(CANRxDataStreamBufferHandle, (void *)&CANRxHeader,sizeof(CANRxHeader), portMAX_DELAY) == sizeof(CANRxHeader))
 8000396:	f04f 33ff 	mov.w	r3, #4294967295
 800039a:	2228      	movs	r2, #40	@ 0x28
 800039c:	4669      	mov	r1, sp
 800039e:	6828      	ldr	r0, [r5, #0]
 80003a0:	f008 fc16 	bl	8008bd0 <xStreamBufferReceive>
 80003a4:	2828      	cmp	r0, #40	@ 0x28
 80003a6:	d167      	bne.n	8000478 <RAMN_ReceiveCANFunc+0xf4>
			uint8_t payloadSize = DLCtoUINT8(CANRxHeader.DataLength);
 80003a8:	9803      	ldr	r0, [sp, #12]
 80003aa:	f001 f80d 	bl	80013c8 <DLCtoUINT8>
			if (payloadSize > 0)
 80003ae:	4604      	mov	r4, r0
 80003b0:	2800      	cmp	r0, #0
 80003b2:	d156      	bne.n	8000462 <RAMN_ReceiveCANFunc+0xde>
			if(CANRxHeader.RxFrameType == FDCAN_DATA_FRAME) {
 80003b4:	9b02      	ldr	r3, [sp, #8]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d1ed      	bne.n	8000396 <RAMN_ReceiveCANFunc+0x12>
				RAMN_DBC_ProcessCANMessage(CANRxHeader.Identifier,payloadSize,(RAMN_CANFrameData_t*)CANRxData);
 80003ba:	4621      	mov	r1, r4
 80003bc:	9800      	ldr	r0, [sp, #0]
 80003be:	aa0a      	add	r2, sp, #40	@ 0x28
 80003c0:	f000 fd66 	bl	8000e90 <RAMN_DBC_ProcessCANMessage>
	if (pHeader->RxFrameType == FDCAN_DATA_FRAME)
 80003c4:	9c02      	ldr	r4, [sp, #8]
 80003c6:	2c00      	cmp	r4, #0
 80003c8:	d1e5      	bne.n	8000396 <RAMN_ReceiveCANFunc+0x12>
	//????????
 80003ca:	9b00      	ldr	r3, [sp, #0]
 80003cc:	42b3      	cmp	r3, r6
 80003ce:	d1e2      	bne.n	8000396 <RAMN_ReceiveCANFunc+0x12>
 80003d0:	9b03      	ldr	r3, [sp, #12]
 80003d2:	2b08      	cmp	r3, #8
 80003d4:	d1df      	bne.n	8000396 <RAMN_ReceiveCANFunc+0x12>
 80003d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80003d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000484 <RAMN_ReceiveCANFunc+0x100>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d1db      	bne.n	8000396 <RAMN_ReceiveCANFunc+0x12>
 80003de:	4b2a      	ldr	r3, [pc, #168]	@ (8000488 <RAMN_ReceiveCANFunc+0x104>)
 80003e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80003e2:	429a      	cmp	r2, r3
 80003e4:	d1d7      	bne.n	8000396 <RAMN_ReceiveCANFunc+0x12>
	CTFTxHeader.Identifier = can_id;
 80003e6:	f240 7277 	movw	r2, #1911	@ 0x777
 80003ea:	2300      	movs	r3, #0
	CTFTxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80003ec:	e9c7 4405 	strd	r4, r4, [r7, #20]
	CTFTxHeader.Identifier = can_id;
 80003f0:	e9c7 2300 	strd	r2, r3, [r7]
		RAMN_memcpy((uint8_t*)CTFTxData,(uint8_t*)&flag[offset],dlc); // Copy 8 last bytes of ECU hardware ID
 80003f4:	f8df a098 	ldr.w	sl, [pc, #152]	@ 8000490 <RAMN_ReceiveCANFunc+0x10c>
		RAMN_FDCAN_SendMessage(&CTFTxHeader,CTFTxData);
 80003f8:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8000480 <RAMN_ReceiveCANFunc+0xfc>
	CTFTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80003fc:	60bc      	str	r4, [r7, #8]
		if ((size - offset) > 8U) dlc = 8U;
 80003fe:	f1c4 0311 	rsb	r3, r4, #17
 8000402:	2b08      	cmp	r3, #8
		else dlc = (uint8_t) (size - offset);
 8000404:	fa5f f983 	uxtb.w	r9, r3
		if ((size - offset) > 8U) dlc = 8U;
 8000408:	dc19      	bgt.n	800043e <RAMN_ReceiveCANFunc+0xba>
		CTFTxHeader.DataLength = UINT8toDLC(dlc);
 800040a:	4648      	mov	r0, r9
 800040c:	f000 ffe2 	bl	80013d4 <UINT8toDLC>
 8000410:	4603      	mov	r3, r0
		RAMN_memcpy((uint8_t*)CTFTxData,(uint8_t*)&flag[offset],dlc); // Copy 8 last bytes of ECU hardware ID
 8000412:	464a      	mov	r2, r9
 8000414:	eb08 0104 	add.w	r1, r8, r4
 8000418:	4650      	mov	r0, sl
		CTFTxHeader.DataLength = UINT8toDLC(dlc);
 800041a:	60fb      	str	r3, [r7, #12]
		RAMN_memcpy((uint8_t*)CTFTxData,(uint8_t*)&flag[offset],dlc); // Copy 8 last bytes of ECU hardware ID
 800041c:	f000 ffdc 	bl	80013d8 <RAMN_memcpy>
		RAMN_FDCAN_SendMessage(&CTFTxHeader,CTFTxData);
 8000420:	4651      	mov	r1, sl
 8000422:	4658      	mov	r0, fp
 8000424:	f000 fbdc 	bl	8000be0 <RAMN_FDCAN_SendMessage>
		offset += dlc;
 8000428:	eb09 0204 	add.w	r2, r9, r4
 800042c:	b294      	uxth	r4, r2
	while (offset < size)
 800042e:	2c10      	cmp	r4, #16
 8000430:	d8b1      	bhi.n	8000396 <RAMN_ReceiveCANFunc+0x12>
		if ((size - offset) > 8U) dlc = 8U;
 8000432:	f1c4 0311 	rsb	r3, r4, #17
 8000436:	2b08      	cmp	r3, #8
		else dlc = (uint8_t) (size - offset);
 8000438:	fa5f f983 	uxtb.w	r9, r3
		if ((size - offset) > 8U) dlc = 8U;
 800043c:	dde5      	ble.n	800040a <RAMN_ReceiveCANFunc+0x86>
		CTFTxHeader.DataLength = UINT8toDLC(dlc);
 800043e:	2008      	movs	r0, #8
 8000440:	f000 ffc8 	bl	80013d4 <UINT8toDLC>
 8000444:	4603      	mov	r3, r0
		RAMN_memcpy((uint8_t*)CTFTxData,(uint8_t*)&flag[offset],dlc); // Copy 8 last bytes of ECU hardware ID
 8000446:	eb08 0104 	add.w	r1, r8, r4
 800044a:	2208      	movs	r2, #8
 800044c:	4650      	mov	r0, sl
		CTFTxHeader.DataLength = UINT8toDLC(dlc);
 800044e:	60fb      	str	r3, [r7, #12]
		offset += dlc;
 8000450:	3408      	adds	r4, #8
		RAMN_memcpy((uint8_t*)CTFTxData,(uint8_t*)&flag[offset],dlc); // Copy 8 last bytes of ECU hardware ID
 8000452:	f000 ffc1 	bl	80013d8 <RAMN_memcpy>
		RAMN_FDCAN_SendMessage(&CTFTxHeader,CTFTxData);
 8000456:	4651      	mov	r1, sl
 8000458:	4658      	mov	r0, fp
 800045a:	f000 fbc1 	bl	8000be0 <RAMN_FDCAN_SendMessage>
		offset += dlc;
 800045e:	b2a4      	uxth	r4, r4
	while (offset < size)
 8000460:	e7cd      	b.n	80003fe <RAMN_ReceiveCANFunc+0x7a>
				if (xStreamBufferReceive(CANRxDataStreamBufferHandle, (void *) CANRxData,payloadSize, portMAX_DELAY ) != payloadSize) Error_Handler();
 8000462:	4602      	mov	r2, r0
 8000464:	f04f 33ff 	mov.w	r3, #4294967295
 8000468:	6828      	ldr	r0, [r5, #0]
 800046a:	a90a      	add	r1, sp, #40	@ 0x28
 800046c:	f008 fbb0 	bl	8008bd0 <xStreamBufferReceive>
 8000470:	4284      	cmp	r4, r0
 8000472:	d09f      	beq.n	80003b4 <RAMN_ReceiveCANFunc+0x30>
 8000474:	b672      	cpsid	i
	while (1)
 8000476:	e7fe      	b.n	8000476 <RAMN_ReceiveCANFunc+0xf2>
 8000478:	b672      	cpsid	i
 800047a:	e7fe      	b.n	800047a <RAMN_ReceiveCANFunc+0xf6>
 800047c:	20032918 	.word	0x20032918
 8000480:	20030028 	.word	0x20030028
 8000484:	5f534c50 	.word	0x5f534c50
 8000488:	215f524d 	.word	0x215f524d
 800048c:	0800aadc 	.word	0x0800aadc
 8000490:	20030020 	.word	0x20030020
